<?xml version="1.0"?>
<!-- ant build file for CENO client and bridge plugins -->

<project name="ceno-plugin" default="dist" basedir=".">
	<property name="svn.revision" value="@custom@"/>
	<property name="source-version" value="1.5"/>

	<property name="build" location="build/"/>
	<property name="build-test" location="build-test/"/>
	<property name="build-gcj" location="build-gcj/"/>
	<property name="dist" location="dist/"/>

	<property name="freenet-cvs-snapshot.location" location="../fred/dist/freenet.jar"/>
	<property name="freenet-ext.location" location="../fred/lib/freenet/freenet-ext.jar"/>
	<property name="junit.location" value="/usr/share/java/junit.jar"/>
	<property name="jetty-serverlet.location" value="lib/javax.servlet-api-3.1.0.jar"/>
	<property name="jetty-all.location" value="lib/jetty-all-9.2.6.v20141205.jar"/>
	<property name="json-smart.location" location="lib/json-smart-1.2.jar"/>
	<property name="sun-mail.location" location="lib/mail.jar"/>
	<property name="apache-commonsvalidator.location" location="lib/commons-validator-1.4.1.jar"/>
	<property name="apache-commonscompress.location" location="lib/commons-compress-1.9.jar"/>
	<property name="apache-commonsio.location" location="lib/commons-io-2.4.jar"/>


	<available file="src/plugins/CENO/Version.java" property="version.present"/>
	<available file="${junit.location}" property="junit.present"/>


	<!-- ================================================== -->
	<target name="mkdir" description="Create the build directory structure used by compile">
		<mkdir dir="${build}"/>
		<mkdir dir="${build-test}"/>
		<mkdir dir="${build-gcj}"/>
		<mkdir dir="${dist}"/>
		<echo message="Using ${freenet-cvs-snapshot.location} as freenet-cvs-snapshot.jar"/>
	</target>


	<!-- ================================================== -->
	<target name="copyresources" description="Copies the resources to build directory">
		<copy todir="${build}">
			<fileset dir="src" includes="**/resources/**" />
			<fileset dir="src" includes="**/*.properties" />
		</copy>
	</target>


	<!-- ================================================== -->
	<target name="setver">
		<!-- Update the Version file -->
		<exec executable="git" failifexecutionfails="false" outputproperty="gitlasttag">
			<arg value="describe"/>
			<arg value="--abbrev=0"/>
			<arg value="--tags"/>
		</exec>
		<replace file="src/plugins/CENO/Version.java">
			<replacefilter token="@custom@" value="${gitlasttag}"/>
		</replace>
		<echo message="Version set to ${gitlasttag}"/>
	</target>


	<!-- ================================================== -->
	<target name="compile" depends="mkdir,setver" >
		<!-- Create the time stamp -->
		<tstamp/>

		<!-- FIXME: remove the debug and replace with optimize -->
		<javac srcdir="src/" destdir="${build}" debug="on" optimize="on" source="${source-version}">
			<classpath>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${jetty-all.location}"/>
				<pathelement location="${jetty-serverlet.location}"/>
				<pathelement location="${json-smart.location}"/>
				<pathelement location="${sun-mail.location}"/>
				<pathelement location="${apache-commonsvalidator.location}" />
				<pathelement location="${apache-commonscompress.location}" />
				<pathelement location="${apache-commonsio.location}" />
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/*Test.java"/>
		</javac>
	</target>

	<!-- ================================================== -->
	<target name="compile-gcj" depends="mkdir,setver" >
		<!-- Create the time stamp -->
		<tstamp/>

		<javac srcdir="src/" destdir="${build-gcj}" compiler="gcj" debug="on" optimize="on" source="${source-version}">
			<classpath>
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${sun-mail.location}"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="**/*Test.java"/>
			<exclude name="plugins/CENO/Client/**"/>
			<exclude name="plugins/CENO/Bridge/**"/>
		</javac>
	</target>


	<!-- ================================================== -->
	<target name="unit-build" depends="compile" if="junit.present" unless="skip_tests">
		<javac srcdir="src/" destdir="${build-test}" debug="on" optimize="on" source="1.5">
			<classpath>
				<pathelement path="${build}"/>
				<!-- <pathelement location="${freenet-ext.location}"/> -->
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${junit.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
			<include name="**/*Test.java"/>
		</javac>
	</target>


	<!-- ================================================== -->
	<target name="junit" depends="unit-build" if="junit.present" unless="skip_tests">
		<junit printsummary="yes" fork="yes" haltonfailure="yes">
			<classpath>
				<pathelement path="${build}"/>
				<pathelement path="${build-test}"/>
				<!-- <pathelement location="${freenet-ext.location}"/> -->
				<pathelement location="${freenet-cvs-snapshot.location}"/>
				<pathelement location="${junit.location}"/>
			</classpath>

			<formatter type="plain" usefile="false"/>

			<batchtest fork="yes">
				<fileset dir="${build-test}">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
			<sysproperty key="benchmark" value="${benchmark}" />
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
		</junit>
	</target>


	<!-- ================================================== -->
	<target name="dist" depends="clean,compile,copyresources,junit"
		description="generate the distribution" >

		<jar jarfile="${dist}/CENO.jar" duplicate="fail">
			<manifest>
				<attribute name="Plugin-Main-Class" value="plugins.CENO.Client.CENOClient"/>
			</manifest>
			<fileset dir="${build}/">
				<exclude name="plugins/CENO/Bridge/**"/>
				<exclude name="plugins/CENO/Backbone/**"/>
			</fileset>
			<zipfileset src="${json-smart.location}" />
			<zipfileset src="${sun-mail.location}" />
			<zipfileset src="${apache-commonsvalidator.location}" excludes="META-INF/" />
			<zipfileset src="${apache-commonscompress.location}" excludes="META-INF/" />
		</jar>

		<jar jarfile="${dist}/CENOBridge.jar" duplicate="fail">
			<manifest>
				<attribute name="Plugin-Main-Class" value="plugins.CENO.Bridge.CENOBridge"/>
			</manifest>
			<fileset dir="${build}/">
				<exclude name="plugins/CENO/Client/**"/>
				<exclude name="plugins/CENO/Backbone/**"/>
			</fileset>
			<zipfileset src="${jetty-all.location}" />
			<zipfileset src="${jetty-serverlet.location}" />
			<zipfileset src="${json-smart.location}" />
			<zipfileset src="${sun-mail.location}" excludes="META-INF/" />
			<zipfileset src="${apache-commonsvalidator.location}" excludes="META-INF/" />
			<zipfileset src="${apache-commonscompress.location}" excludes="META-INF/" />
			<zipfileset src="${apache-commonsio.location}" excludes="META-INF/" />
		</jar>
		
		<jar jarfile="${dist}/CENOBackbone.jar" duplicate="fail">
			<manifest>
				<attribute name="Plugin-Main-Class" value="plugins.CENO.Backbone.CENOBackbone"/>
			</manifest>
			<fileset dir="${build}/">
				<exclude name="plugins/CENO/Client/**"/>
				<exclude name="plugins/CENO/Bridge/**"/>
			</fileset>
			<zipfileset src="${apache-commonscompress.location}" />
			<zipfileset src="${sun-mail.location}" excludes="META-INF/LICENSE.txt" />
		</jar>
	</target>
	
	<!-- ================================================== -->
	<target name="dist-gcj" depends="clean,compile-gcj,copyresources,junit"
		description="generate the distribution" >

		<jar jarfile="${dist}/CENOBackboneGCJ" duplicate="fail">
			<manifest>
				<attribute name="Plugin-Main-Class" value="plugins.CENO.Backbone.CENOBackbone"/>
			</manifest>
			<fileset dir="${build-gcj}/">
				<exclude name="plugins/CENO/Client/**"/>
				<exclude name="plugins/CENO/Bridge/**"/>
			</fileset>
		</jar>
	</target>



	<!-- ================================================== -->
	<target name="sign" depends="dist" description="Sign the generated jar files.">
		<property file="antSign.properties"/>
		<signjar
			alias="${sign.alias}" keystore="${sign.keystore}"
			storepass="${sign.storepass}" tsaurl="http://tsa.starfieldtech.com">
			<path>
				<fileset dir="dist" includes="**/*.jar" />
			</path>
		</signjar>
	</target>


	<!-- ================================================== -->
	<target name="clean" description="Delete class files and docs dir.">
		<delete dir="${build}"/>
		<delete dir="${build-test}"/>
		<delete dir="${dist}"/>
	</target>

</project>

